/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50714
Source Host           : localhost:3306
Source Database       : wiki

Target Server Type    : MYSQL
Target Server Version : 50714
File Encoding         : 65001

Date: 2016-10-06 21:35:37
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for tool_code
-- ----------------------------
DROP TABLE IF EXISTS `tool_code`;
CREATE TABLE `tool_code` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` text,
  `type` int(11) DEFAULT NULL,
  `time` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=88 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tool_code
-- ----------------------------
INSERT INTO `tool_code` VALUES ('1', 'public class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\");\n    }\n}\n', '4', '2016-09-14 13:08:22');
INSERT INTO `tool_code` VALUES ('2', 'using System;\nnamespace HelloWorldApplication\n{\n   class HelloWorld\n   {\n      static void Main(string[] args)\n      {\n         /* 我的第一个 C# 程序*/\n         Console.WriteLine(\"Hello World!\");\n         Console.ReadKey();\n      }\n   }\n}\n', '7', '2016-09-14 13:08:47');
INSERT INTO `tool_code` VALUES ('3', '#!/usr/bin/python\nprint(\"Hello, World!\");\n', '6', '2016-09-14 13:35:24');
INSERT INTO `tool_code` VALUES ('4', 'console.log(\"Hello World!\");\n', '14', '2016-09-14 13:37:30');
INSERT INTO `tool_code` VALUES ('5', 'package main\n\nimport \"fmt\"\n\nfunc main() {\n   fmt.Println(\"Hello, World!\")\n}\n', '13', '2016-09-14 13:42:23');
INSERT INTO `tool_code` VALUES ('6', '#!/usr/bin/ruby\n# -*- coding: UTF-8 -*-\n\nputs \"Hello World!\";\nputs \'今天是中秋节啦\';', '10', '2016-09-15 02:29:43');
INSERT INTO `tool_code` VALUES ('7', '<?php\necho \'Hello World!\';\n?>\n', '3', '2016-09-15 04:03:38');
INSERT INTO `tool_code` VALUES ('8', '<?php\necho \'Hello World!\';\n?>\n', '3', '2016-09-15 04:39:10');
INSERT INTO `tool_code` VALUES ('9', '<?php\necho \'Hello World!\';\n?>\n', '3', '2016-09-15 04:39:17');
INSERT INTO `tool_code` VALUES ('10', '<?php\necho \'Hello World!\';\n?>\n', '3', '2016-09-15 04:41:46');
INSERT INTO `tool_code` VALUES ('11', '<?php\necho \'Hello World!中秋\';\n?>\n', '3', '2016-09-15 04:41:56');
INSERT INTO `tool_code` VALUES ('12', '<?php\necho \'Hello World!\';\n?>\n', '3', '2016-09-15 04:43:44');
INSERT INTO `tool_code` VALUES ('13', '<?php\necho \'Hello World!\';\n?>\n', '3', '2016-09-15 04:43:47');
INSERT INTO `tool_code` VALUES ('14', 'package main\n\nimport \"fmt\"\n\nfunc main() {\n   fmt.Println(\"Hello, World!\")\n}\n', '13', '2016-09-15 07:05:19');
INSERT INTO `tool_code` VALUES ('15', '#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   return 0;\n}\n', '1', '2016-09-15 07:35:37');
INSERT INTO `tool_code` VALUES ('16', '<?php\necho \'Hello World!\';\nphpinfo();\n?>\n', '3', '2016-09-15 07:36:19');
INSERT INTO `tool_code` VALUES ('17', '#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   return 0;\n}\n', '1', '2016-09-15 11:57:46');
INSERT INTO `tool_code` VALUES ('18', '#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   std::cout << \"hah\" << std::endl;\n   return 0;\n}\n\n', '1', '2016-09-15 12:35:37');
INSERT INTO `tool_code` VALUES ('19', '#include <stdio.h>\n#include \"iostream\"\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   std::cout << \"hah\" << std::endl;\n   return 0;\n}\n\n', '1', '2016-09-15 12:35:59');
INSERT INTO `tool_code` VALUES ('20', '#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   return 0;\n}\n\n', '1', '2016-09-15 13:10:34');
INSERT INTO `tool_code` VALUES ('21', '#include <stdio.h>\n#include \"iostream\"\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   std::cout << \"haha\" << std::endl;\n   return 0;\n}\n\n', '1', '2016-09-15 13:25:26');
INSERT INTO `tool_code` VALUES ('22', '#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   return 0;\n}\n\n', '1', '2016-09-15 13:44:35');
INSERT INTO `tool_code` VALUES ('23', '#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   return 0;\n}\n\n', '1', '2016-09-15 13:44:47');
INSERT INTO `tool_code` VALUES ('24', '<?php\nphpinfo();\n?>\n', '3', '2016-09-15 13:47:22');
INSERT INTO `tool_code` VALUES ('25', 'public class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\");\n    }\n}\n', '4', '2016-09-15 13:49:38');
INSERT INTO `tool_code` VALUES ('26', '#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   return 0;\n}\n\n', '1', '2016-09-16 03:50:58');
INSERT INTO `tool_code` VALUES ('27', 'public class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\");\n      System.out.printf(\"Message\");\n    }\n}\n', '4', '2016-09-16 04:17:43');
INSERT INTO `tool_code` VALUES ('28', '<?php\necho \'Hello World!\';\nphpinfo();\n?>\n', '3', '2016-09-16 04:18:51');
INSERT INTO `tool_code` VALUES ('29', '<?php\necho \'Hello World!\';\nphpinfo();\n?>\n', '3', '2016-09-16 04:28:29');
INSERT INTO `tool_code` VALUES ('30', '<?php\necho \'Hello World!\';\nphpinfo();\n?>\n', '3', '2016-09-16 04:30:58');
INSERT INTO `tool_code` VALUES ('31', '/**\n * Created on: 2016年09月16日 04:46:22\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n<?php\necho \'Hello World!\';\nphpinfo();\n?>\n', '3', '2016-09-16 04:46:36');
INSERT INTO `tool_code` VALUES ('32', '/**\n * Created on: 2016年09月16日 04:46:54\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n# -*- coding: UTF-8 -*-\nprint \'Hello World!\'\n', '5', '2016-09-16 04:46:57');
INSERT INTO `tool_code` VALUES ('33', '/**\n * Created on: 2016年09月16日 04:47:08\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\nusing System;\nnamespace HelloWorldApplication\n{\n   class HelloWorld\n   {\n      static void Main(string[] args)\n      {\n         /* 我的第一个 C# 程序*/\n         Console.WriteLine(\"Hello World!\");\n         Console.ReadKey();\n      }\n   }\n}\n', '7', '2016-09-16 04:47:13');
INSERT INTO `tool_code` VALUES ('34', '/**\n * Created on: 2016年09月16日 04:49:50\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n<?php\necho \'Hello World!\';\n?>\n', '3', '2016-09-16 04:49:53');
INSERT INTO `tool_code` VALUES ('35', '\"\"\"\n * Created on: 2016年09月16日 04:56:53\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n\"\"\"\n# -*- coding: UTF-8 -*-\nprint \'Hello World!\'\n', '5', '2016-09-16 04:56:59');
INSERT INTO `tool_code` VALUES ('36', '/**\n * Created on: 2016年09月16日 05:28:29\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n#include \"iostream\"\n\nint main()\n{\n    std::cout << 6666 << std::endl;\n   /* 我的第一个 C 程序 */\n//   printf(\"Hello, World! \\n\");\n   return 0;\n}\n', '1', '2016-09-16 05:38:19');
INSERT INTO `tool_code` VALUES ('37', '/**\n * Created on: 2016年09月16日 07:11:42\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\");\n       System.out.println(\"66666\");\n    }\n}\n', '4', '2016-09-16 07:13:06');
INSERT INTO `tool_code` VALUES ('38', '/**\n * Created on: 2016年09月16日 07:11:42\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\")\n       System.out.println(\"66666\");\n    }\n}\n', '4', '2016-09-16 07:13:28');
INSERT INTO `tool_code` VALUES ('39', '/**\n * Created on: 2016年09月16日 07:15:06\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\");\n    }\n}\n', '4', '2016-09-16 07:15:12');
INSERT INTO `tool_code` VALUES ('40', '/**\n * Created on: 2016年09月16日 07:15:15\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\");\n    }\n}\n', '4', '2016-09-16 07:15:19');
INSERT INTO `tool_code` VALUES ('41', '/**\n * Created on: 2016年09月16日 07:15:15\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\")\n    }\n}\n', '4', '2016-09-16 07:15:49');
INSERT INTO `tool_code` VALUES ('42', '/**\n * Created on: 2016年09月16日 07:15:15\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\")\n    }\n}\n', '4', '2016-09-16 07:17:02');
INSERT INTO `tool_code` VALUES ('43', '/**\n * Created on: 2016年09月16日 07:17:48\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\")\n    }\n}\n', '4', '2016-09-16 07:17:54');
INSERT INTO `tool_code` VALUES ('44', '/**\n * Created on: 2016年09月16日 07:17:48\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\");\n    }\n}\n', '4', '2016-09-16 07:18:16');
INSERT INTO `tool_code` VALUES ('45', '/**\n * Created on: 2016年09月16日 07:11:42\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\")\n       System.out.println(\"66666\");\n    }\n}\n', '4', '2016-09-16 07:18:38');
INSERT INTO `tool_code` VALUES ('46', '/**\n * Created on: 2016年09月16日 07:20:36\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   for (auto i : container) {\n       /* code */\n   }\n   return 0;\n}\n', '1', '2016-09-16 07:20:52');
INSERT INTO `tool_code` VALUES ('47', '/**\n * Created on: 2016年09月16日 07:14:13\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\")\n    }\n}\n', '4', '2016-09-16 07:23:18');
INSERT INTO `tool_code` VALUES ('48', '/**\n * Created on: 2016年09月16日 07:33:03\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\");\n    }\n}\n', '4', '2016-09-16 07:33:13');
INSERT INTO `tool_code` VALUES ('49', '/**\n * Created on: 2016年09月16日 07:38:58\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\");\n    }\n}\n', '4', '2016-09-16 07:39:08');
INSERT INTO `tool_code` VALUES ('50', '/**\n * Created on: 2016年09月16日 07:44:30\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\");\n    }\n}\n', '4', '2016-09-16 07:44:36');
INSERT INTO `tool_code` VALUES ('51', '/* 我的第一个 Swift 程序 */\nvar myString = \"Hello, World!\"\n\nprint(myString)\n', '9', '2016-09-16 08:36:28');
INSERT INTO `tool_code` VALUES ('52', '# Created on: 2016年09月16日 11:56:05\n# Author: Guest\n# Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n# -*- coding: UTF-8 -*-\nprint \'Hello World!\'\n', '5', '2016-09-16 11:56:08');
INSERT INTO `tool_code` VALUES ('53', '# -*- coding: UTF-8 -*-\n# Created on: 2016年09月16日 11:56:05\n# Author: Guest\n# Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n\nprint \'Hello World!\'\n', '5', '2016-09-16 11:56:43');
INSERT INTO `tool_code` VALUES ('54', '# Created on: 2016年09月16日 11:57:40\n# Author: Guest\n# Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n#!/usr/bin/python\nprint(\"Hello, World!\");\n', '6', '2016-09-16 11:57:44');
INSERT INTO `tool_code` VALUES ('55', '#!/usr/bin/ruby\n# -*- coding: UTF-8 -*-\n\nputs \"Hello World!\";\n', '10', '2016-09-16 12:14:35');
INSERT INTO `tool_code` VALUES ('56', '#!/usr/bin/perl\n		\nprint \"Hello, World!\\n\";\n', '11', '2016-09-16 12:14:41');
INSERT INTO `tool_code` VALUES ('57', '#!/bin/bash\necho \'Hello World!\'\n', '12', '2016-09-16 12:14:46');
INSERT INTO `tool_code` VALUES ('58', '<?php\n\nphpinfo();\n\n?>', '3', '2016-09-16 12:19:00');
INSERT INTO `tool_code` VALUES ('59', '# -*- coding: UTF-8 -*-\n# Created on: 2016年09月17日 07:46:05\n# Author: Guest\n# Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n\nprint \'Hello World!\'\n', '5', '2016-09-17 07:46:15');
INSERT INTO `tool_code` VALUES ('60', '/**\n * Created on: 2016年09月17日 12:16:32\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\nusing System;\nnamespace HelloWorldApplication\n{\n   class HelloWorld\n   {\n      static void Main(string[] args)\n      {\n         /* 我的第一个 C# 程序*/\n         Console.WriteLine(\"Hello World!\");\n         Console.WriteLine(\"just a test\");\n         Console.ReadKey();\n      }\n   }\n}\n', '6', '2016-09-17 12:17:20');
INSERT INTO `tool_code` VALUES ('61', '<?php\n/**\n * Created on: 2016年09月17日 12:47:45\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n\necho \'Hello World!\';\nphpinfo();\n\n?>\n', '3', '2016-09-17 12:48:12');
INSERT INTO `tool_code` VALUES ('62', '#import <Foundation/Foundation.h>\n		\nint main(int argc, const char * argv[]){\n     NSLog(@\"Hello world!\");\n     NSString* s=@\"jtahstu\";\n     NSLog(@\"my name is %@\",s);\n     \n     return (0);\n}\n', '8', '2016-09-17 13:13:07');
INSERT INTO `tool_code` VALUES ('63', '/**\n * Created on: 2016年09月18日 15:43:56\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   return 0;\n}\n', '1', '2016-09-18 15:44:03');
INSERT INTO `tool_code` VALUES ('64', '/**\n * Created on: 2016年09月18日 15:58:55\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n    //Light.java\n    public class Light {\n    	private String position;\n     \n    	public Light(String position) {\n    		this.position = position;\n    	}\n     \n    	public void on() {\n    		System.out.println(this.position + \"灯打开！\");\n    	}\n     \n    	public void off() {\n    		System.out.println(this.position + \"灯关闭！\");\n    	}\n    }\n     \n    //Fan.java\n    public class Fan {\n    	public void on() {\n    		System.out.println(\"风扇打开！\");\n    	}\n     \n    	public void off() {\n    		System.out.println(\"风扇关闭！\");\n    	}\n     \n    }\n     \n    //AirConditioner.java\n    public class AirConditioner {\n    	public void on() {\n    		System.out.println(\"空调打开！\");\n    	}\n     \n    	public void off() {\n    		System.out.println(\"空调关闭！\");\n    	}\n    }\n     \n    //Television.java\n    public class Television {\n    	public void on() {\n    		System.out.println(\"电视机打开！\");\n    	}\n     \n    	public void off() {\n    		System.out.println(\"电视机关闭！\");\n    	}\n    }\n     \n    //GeneralSwitchFacade.java（总开关类） 外观类\n    public class GeneralSwitchFacade {\n    	private Light lights[] = new Light[4];\n    	private Fan fan;\n    	private AirConditioner ac;\n    	private Television tv;\n     \n    	public GeneralSwitchFacade() {\n    		lights[0] = new Light(\"左前\");\n    		lights[1] = new Light(\"右前\");\n    		lights[2] = new Light(\"左后\");\n    		lights[3] = new Light(\"右后\");\n    		fan = new Fan();\n    		ac = new AirConditioner();\n    		tv = new Television();\n    	}\n     \n    	public void on() {\n    		lights[0].on();\n    		lights[1].on();\n    		lights[2].on();\n    		lights[3].on();\n    		fan.on();\n    		ac.on();\n    		tv.on();\n    	}\n     \n    	public void off() {\n    		lights[0].off();\n    		lights[1].off();\n    		lights[2].off();\n    		lights[3].off();\n    		fan.off();\n    		ac.off();\n    		tv.off();\n    	}\n    }\n     \n    //Client.java\n    public class Client {\n    	public static void main(String args[]) {\n    		GeneralSwitchFacade gsf = new GeneralSwitchFacade();\n    		gsf.on();\n    		System.out.println(\"-----------------------\");\n    		gsf.off();\n    	}\n    }\n', '4', '2016-09-18 15:59:06');
INSERT INTO `tool_code` VALUES ('65', '/**\n * Created on: 2016年09月18日 15:58:55\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n    //Light.java\n    public class Light {\n    	private String position;\n     \n    	public Light(String position) {\n    		this.position = position;\n    	}\n     \n    	public void on() {\n    		System.out.println(this.position + \"灯打开！\");\n    	}\n     \n    	public void off() {\n    		System.out.println(this.position + \"灯关闭！\");\n    	}\n    }\n     \n    //Fan.java\n    public class Fan {\n    	public void on() {\n    		System.out.println(\"风扇打开！\");\n    	}\n     \n    	public void off() {\n    		System.out.println(\"风扇关闭！\");\n    	}\n     \n    }\n     \n    //AirConditioner.java\n    public class AirConditioner {\n    	public void on() {\n    		System.out.println(\"空调打开！\");\n    	}\n     \n    	public void off() {\n    		System.out.println(\"空调关闭！\");\n    	}\n    }\n     \n    //Television.java\n    public class Television {\n    	public void on() {\n    		System.out.println(\"电视机打开！\");\n    	}\n     \n    	public void off() {\n    		System.out.println(\"电视机关闭！\");\n    	}\n    }\n     \n    //GeneralSwitchFacade.java（总开关类） 外观类\n    public class GeneralSwitchFacade {\n    	private Light lights[] = new Light[4];\n    	private Fan fan;\n    	private AirConditioner ac;\n    	private Television tv;\n     \n    	public void GeneralSwitchFacade() {\n    		lights[0] = new Light(\"左前\");\n    		lights[1] = new Light(\"右前\");\n    		lights[2] = new Light(\"左后\");\n    		lights[3] = new Light(\"右后\");\n    		fan = new Fan();\n    		ac = new AirConditioner();\n    		tv = new Television();\n    	}\n     \n    	public void on() {\n    		lights[0].on();\n    		lights[1].on();\n    		lights[2].on();\n    		lights[3].on();\n    		fan.on();\n    		ac.on();\n    		tv.on();\n    	}\n     \n    	public void off() {\n    		lights[0].off();\n    		lights[1].off();\n    		lights[2].off();\n    		lights[3].off();\n    		fan.off();\n    		ac.off();\n    		tv.off();\n    	}\n    }\n     \n    //Client.java\n    public class Client {\n    	public static void main(String args[]) {\n    		GeneralSwitchFacade gsf = new GeneralSwitchFacade();\n    		gsf.on();\n    		System.out.println(\"-----------------------\");\n    		gsf.off();\n    	}\n    }\n', '4', '2016-09-18 15:59:33');
INSERT INTO `tool_code` VALUES ('66', '/**\n * Created on: 2016年09月18日 15:58:55\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n    //Light.java\n     class Light {\n    	private String position;\n     \n    	public Light(String position) {\n    		this.position = position;\n    	}\n     \n    	public void on() {\n    		System.out.println(this.position + \"灯打开！\");\n    	}\n     \n    	public void off() {\n    		System.out.println(this.position + \"灯关闭！\");\n    	}\n    }\n     \n    //Fan.java\n     class Fan {\n    	public void on() {\n    		System.out.println(\"风扇打开！\");\n    	}\n     \n    	public void off() {\n    		System.out.println(\"风扇关闭！\");\n    	}\n     \n    }\n     \n    //AirConditioner.java\n     class AirConditioner {\n    	public void on() {\n    		System.out.println(\"空调打开！\");\n    	}\n     \n    	public void off() {\n    		System.out.println(\"空调关闭！\");\n    	}\n    }\n     \n    //Television.java\n     class Television {\n    	public void on() {\n    		System.out.println(\"电视机打开！\");\n    	}\n     \n    	public void off() {\n    		System.out.println(\"电视机关闭！\");\n    	}\n    }\n     \n    //GeneralSwitchFacade.java（总开关类） 外观类\n     class GeneralSwitchFacade {\n    	private Light lights[] = new Light[4];\n    	private Fan fan;\n    	private AirConditioner ac;\n    	private Television tv;\n     \n    	public void GeneralSwitchFacade() {\n    		lights[0] = new Light(\"左前\");\n    		lights[1] = new Light(\"右前\");\n    		lights[2] = new Light(\"左后\");\n    		lights[3] = new Light(\"右后\");\n    		fan = new Fan();\n    		ac = new AirConditioner();\n    		tv = new Television();\n    	}\n     \n    	public void on() {\n    		lights[0].on();\n    		lights[1].on();\n    		lights[2].on();\n    		lights[3].on();\n    		fan.on();\n    		ac.on();\n    		tv.on();\n    	}\n     \n    	public void off() {\n    		lights[0].off();\n    		lights[1].off();\n    		lights[2].off();\n    		lights[3].off();\n    		fan.off();\n    		ac.off();\n    		tv.off();\n    	}\n    }\n     \n    //Client.java\n     class Client {\n    	public static void main(String args[]) {\n    		GeneralSwitchFacade gsf = new GeneralSwitchFacade();\n    		gsf.on();\n    		System.out.println(\"-----------------------\");\n    		gsf.off();\n    	}\n    }\n', '4', '2016-09-18 16:00:20');
INSERT INTO `tool_code` VALUES ('67', '    <?php\n     \n    /**\n     * Created by PhpStorm.\n     * User: jtahstu\n     * Date: 2016/8/24\n     * Time: 12:09\n     */\n    class test {\n    	private static $_instance;\n    	//保存类实例的私有静态成员变量\n     \n    	//定义一个私有的构造函数，确保单例类不能通过new关键字实例化，只能被其自身实例化\n    	private final function __construct() {\n    		echo \'test __construct\';\n    	}\n     \n    	//定义私有的__clone()方法，确保单例类不能被复制或克隆\n    	private function __clone() {\n    	}\n     \n    	public static function getInstance() {\n    		//检测类是否被实例化\n    		if (!(self::$_instance instanceof self)) {\n    			self::$_instance = new test();\n    		}\n    		return self::$_instance;\n    	}\n     \n    }\n     \n    //调用单例类\n    test::getInstance();', '3', '2016-09-18 16:01:31');
INSERT INTO `tool_code` VALUES ('68', '/**\n * Created on: 2016年09月18日 18:29:35\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\ntypedef struct {\n    char key[15];	//关键字\n    char name[20];\n    int age;\n} DATA; 	//数据结点类型\n#include <stdlib.h>\ntypedef struct Node {\n    DATA data;\n    struct Node *next;\n} ChainListType;\nChainListType *ChainListAddEnd(ChainListType *head,DATA data);  //添加结点到链表末尾\nChainListType *ChainListAddFirst(ChainListType *head,DATA data);  //添加结点到链表首部\nChainListType *ChainListFind(ChainListType *head,char *key); //按关键字在链表中查找内容\nChainListType *ChainListInsert(ChainListType *head,char *findkey,DATA data);  //插入结点到链表指定位置\nint ChainListDelete(ChainListType *head,char *key);//删除指定关键字的结点\nint ChainListLength(ChainListType *head);//获取链表结点数量\n\n//#include \"2-5 ChainList.c\"\n#include <string.h>\nChainListType *ChainListAddEnd(ChainListType *head,DATA data) { //添加结点到链表结尾\n    ChainListType *node,*h;\n    if(!(node=(ChainListType *)malloc(sizeof(ChainListType)))) {\n        printf(\"为保存结点数据申请内存失败！\\n\");\n        return NULL;  //分配内存失败\n    }\n    node->data=data; //保存数据\n    node->next=NULL;  //设置结点指针为空，即为表尾\n    if(head==NULL) { //是头指针\n        head=node;\n        return head;\n    }\n    h=head;\n    while(h->next!=NULL) //查找链表的末尾\n        h=h->next ;\n    h->next=node;\n    return head;\n}\nChainListType *ChainListAddFirst(ChainListType *head,DATA data) {\n    ChainListType *node,*h;\n    if(!(node=(ChainListType *)malloc(sizeof(ChainListType)))) {\n        printf(\"为保存结点数据申请内存失败！\\n\");\n        return NULL;  //分配内存失败\n    }\n    node->data=data; //保存数据\n    node->next=head;  //指向头指针所指结点\n    head=node;        //头指针指向新增结点\n    return head;\n}\nChainListType *ChainListInsert(ChainListType *head,char *findkey,DATA data) { //插入结点到链表指定位置\n    ChainListType *node,*node1;\n    if(!(node=(ChainListType *)malloc(sizeof(ChainListType)))) { //分配保存结点的内容\n        printf(\"为保存结点数据申请内存失败！\\n\");\n        return 0;  //分配内存失败\n    }\n    node->data=data;  //保存结点中的数据\n    node1=ChainListFind(head,findkey);\n    if(node1) { //若找到要插入的结点\n        node->next=node1->next;  //新插入结点指向关键结点的下一结点\n        node1->next=node;    //设置关键结点指向新插入结点\n    } else {\n        free(node);//释放内存\n        printf(\"未找到插入位置！\\n\");\n    }\n    return head;//返回头指针\n}\nChainListType *ChainListFind(ChainListType *head,char *key) { //按关键字在链表中查找内容\n    ChainListType *h;\n    h=head;       //保存链表头指针\n    while(h) {    //若结点有效，则进行查找\n        if(strcmp(h->data.key,key)==0) //若结点关键字与传入关键字相同\n            return h;  //返回该结点指针\n        h=h->next; //处理下一结点\n    }\n    return NULL; //返回空指针\n}\nint ChainListDelete(ChainListType *head,char *key) {\n    ChainListType *node,*h; //node保存删除结点的前一结点\n    node=h=head;\n    while(h) {\n        if(strcmp(h->data.key,key)==0) { //找到关键字，执行删除操作\n            node->next=h->next;  //使前一结点指向当前结点的下一结点\n            free(h);  //释放内存\n            return 1;\n        } else {\n            node=h;  //指向当前结点\n            h=h->next; //指向下一结点\n        }\n    }\n    return 0;//未删除\n}\nint ChainListLength(ChainListType *head) { //获取链表结点数量\n    ChainListType *h;\n    int i=0;\n    h=head;\n    while(h) {    //遍历整个链表\n        i++; //累加结点数量\n        h=h->next;//处理下一结点\n    }\n    return i;//返回结点数量\n}\n\nvoid ChainListAll(ChainListType *head) { //遍历链表\n    ChainListType *h;\n    DATA data;\n    h=head;\n    printf(\"链表所有数据如下：\\n\");\n    while(h) { //循环处理链表每个结点\n        data=h->data;//获取结点数据\n        printf(\"(%s,%s,%d)\\n\",data.key,data.name,data.age);\n        h=h->next;//处理下一结点\n    }\n    return;\n}\nint main() {\n    ChainListType *node, *head=NULL;\n    DATA data;\n    char key[15],findkey[15];\n\n    printf(\"输入链表中的数据，包括关键字、姓名、年龄，关键字输入0，则退出：\\n\");\n    do {\n        fflush(stdin);  //清空输入缓冲区\n        scanf(\"%s\",data.key);\n        if(strcmp(data.key,\"0\")==0) break; //若输入0，则退出\n        scanf(\"%s%d\",data.name,&data.age);\n        head=ChainListAddEnd(head,data);//在链表尾部添加结点数据\n    } while(1);\n\n    printf(\"该链表共有%d个结点。\\n\",ChainListLength(head)); //返回结点数量\n    ChainListAll(head); //显示所有结点\n\n    printf(\"\\n插入结点，输入插入位置的关键字：\") ;\n    scanf(\"%s\",&findkey);//输入插入位置关键字\n    printf(\"输入插入结点的数据(关键字 姓名 年龄):\");\n    scanf(\"%s%s%d\",data.key,data.name,&data.age);//输入插入结点数据\n    head=ChainListInsert(head,findkey,data);//调用插入函数\n\n    ChainListAll(head); //显示所有结点\n\n    printf(\"\\n在链表中查找，输入查找关键字:\");\n    fflush(stdin);//清空输入缓冲区\n    scanf(\"%s\",key);//输入查找关键字\n    node=ChainListFind(head,key);//调用查找函数，返回结点指针\n    if(node) { //若返回结点指针有效\n        data=node->data;//获取结点的数据\n        printf(\"关键字%s对应的结点数据为(%s,%s,%d)\\n\" ,key,data.key,data.name,data.age);\n    } else//若结点指针无效\n        printf(\"在链表中未找到关键字为%s的结点！\\n\",key);\n\n    printf(\"\\n在链表中删除结点，输入要删除的关键字:\");\n    fflush(stdin);//清空输入缓冲区\n    scanf(\"%s\",key);//输入删除结点关键字\n    ChainListDelete(head,key); //调用删除结点函数\n    ChainListAll(head); //显示所有结点\n    getch();\n    return 0;\n}', '1', '2016-09-18 18:30:40');
INSERT INTO `tool_code` VALUES ('69', '/**\n * Created on: 2016年09月21日 20:24:58\n * Author: jtahstu\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 作用域\n */\n#include <stdio.h>\n\nvoid fun(){\n    int a=3,b;\n    printf(\"fun()函数里面的a的值为：%d\\n\",a);\n    return ;\n}\n\nint main()\n{\n   	int a=0,b;\n   	{\n   	    int a=1;\n   	    printf(\"main()函数里面被大括号封装的a的值为：%d\\n\",a);\n   	}\n   	fun();\n   	printf(\"mian()函数里面的a的值为:%d\\n\",a);\n   	return 0;\n}\n', '1', '2016-09-21 20:28:28');
INSERT INTO `tool_code` VALUES ('70', '/**\n * Created on: 2016年09月21日 20:31:59\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 静态局部变量\n */\n#include <stdio.h>\n\nvoid print(){\n    static int a=0;\n    printf(\"静态局部变量a=%d\\n\",a++);\n}\n\nint main()\n{\n   	print();\n   	print();\n   	return 0;\n}\n', '1', '2016-09-21 20:33:23');
INSERT INTO `tool_code` VALUES ('71', '/**\n * Created on: 2016年09月21日 20:33:28\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 指针数组和数组指针\n */\n#include <stdio.h>\n\nint main()\n{\n   	int arr[4][4]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   	int (*p1)[4];\n   	int *p2[4];\n   	int i,j,k;\n   	p1=arr;\n   	printf(\"使用数组指针的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,*(*(p1+i)+j));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	printf(\"\\n使用指针数组的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,*(p2[i])+j));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	return 0;\n}\n', '1', '2016-09-21 20:38:08');
INSERT INTO `tool_code` VALUES ('72', '/**\n * Created on: 2016年09月21日 20:33:28\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 指针数组和数组指针\n */\n#include <stdio.h>\n\nint main()\n{\n   	int arr[4][4]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   	int (*p1)[4];\n   	int *p2[4];\n   	int i,j,k;\n   	p1=arr;\n   	printf(\"使用数组指针的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,*(*(p1+i)+j)));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	printf(\"\\n使用指针数组的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,*(p2[i])+j));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	return 0;\n}\n', '1', '2016-09-21 20:38:36');
INSERT INTO `tool_code` VALUES ('73', '/**\n * Created on: 2016年09月21日 20:33:28\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 指针数组和数组指针\n */\n#include <stdio.h>\n\nint main()\n{\n   	int arr[4][4]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   	int (*p1)[4];\n   	int *p2[4];\n   	int i,j,k;\n   	p1=arr;\n   	printf(\"使用数组指针的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,(*(*(p1+i)+j)));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	printf(\"\\n使用指针数组的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,*(p2[i])+j));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	return 0;\n}\n', '1', '2016-09-21 20:39:02');
INSERT INTO `tool_code` VALUES ('74', '/**\n * Created on: 2016年09月21日 20:33:28\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 指针数组和数组指针\n */\n#include <stdio.h>\n\nint main()\n{\n   	int arr[4][4]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   	int (*p1)[4];\n   	int *p2[4];\n   	int i,j,k;\n   	p1=arr;\n   	printf(\"使用数组指针的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,(*(*(p1+i)+j)));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	printf(\"\\n使用指针数组的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,(*(p2[i])+j)));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	return 0;\n}\n', '1', '2016-09-21 20:39:23');
INSERT INTO `tool_code` VALUES ('75', '/**\n * Created on: 2016年09月21日 20:33:28\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 指针数组和数组指针\n */\n#include <stdio.h>\n\nint main()\n{\n   	int arr[4][4]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   	int (*p1)[4];\n   	int *p2[4];\n   	int i,j,k;\n   	p1=arr;\n   	printf(\"使用数组指针的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,(*(*(p1+i)+j)));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	printf(\"\\n使用指针数组的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,(*(p2[i]+j)));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	return 0;\n}\n', '1', '2016-09-21 20:39:58');
INSERT INTO `tool_code` VALUES ('76', '/**\n * Created on: 2016年09月21日 20:33:28\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 指针数组和数组指针\n */\n#include <stdio.h>\n\nint main()\n{\n   	int arr[4][4]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   	int (*p1)[4];\n   	int *p2[4];\n   	int i,j,k;\n   	p1=arr;\n   	printf(\"使用数组指针的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\n\",i,j,(*(*(p1+i)+j)));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	printf(\"\\n使用指针数组的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\n\",i,j,(*(p2[i]+j)));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	return 0;\n}\n', '1', '2016-09-21 20:40:20');
INSERT INTO `tool_code` VALUES ('77', '/**\n * Created on: 2016年09月21日 20:33:28\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 指针数组和数组指针\n */\n#include <stdio.h>\n\nint main()\n{\n   	int arr[4][4]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   	int (*p1)[4];\n   	int *p2[4];\n   	int i,j,k;\n   	p1=arr;\n   	printf(\"使用数组指针的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\n\",i,j,*(*(p1+i)+j));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	printf(\"\\n使用指针数组的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\n\",i,j,*(p2[i]+j));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	return 0;\n}\n', '1', '2016-09-21 20:40:52');
INSERT INTO `tool_code` VALUES ('78', '/**\n * Created on: 2016年09月21日 20:33:28\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 指针数组和数组指针\n */\n#include <stdio.h>\n\nint main()\n{\n   	int arr[4][4]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   	int (*p1)[4];\n   	int *p2[4];\n   	int i,j,k;\n   	p1=arr;\n   	printf(\"使用数组指针的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,*(*(p1+i)+j));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	printf(\"\\n使用指针数组的方式访问二维数组arr\\n\");\n   	for(k=0;k<4;k++)\n        p2[k]=arr[k];\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,*(p2[i]+j));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	return 0;\n}\n', '1', '2016-09-21 20:45:43');
INSERT INTO `tool_code` VALUES ('79', '/**\n * Created on: 2016年09月21日 20:46:41\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n\nint main()\n{\n   	int arr[4][4]={0,1,2,3,4,5,6,7,8,9,10,1,12,13,14,15};\n   	int i;\n   	for (int i = 0; i < 4; i++) {\n   	    printf(\"第%d行的起始地址为：%d\\n\",i+1,arr+i);\n   	    printf(\"第%d行的起始地址为：%d\\n\",i+1,arr[i]);\n   	    printf(\"第%d行的起始地址为：%d\\n\",i+1,*(arr+i));\n   	    printf(\"第%d行的起始地址为：%d\\n\\n\",i+1,&arr[i]);\n   	}\n   	return 0;\n}\n', '1', '2016-09-21 20:49:10');
INSERT INTO `tool_code` VALUES ('80', '/**\n * Created on: 2016年09月22日 12:10:12\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n    #include<stdio.h>\n    #include<stdlib.h>\n     \n    typedef struct Node {\n        int data;\n        struct Node *lchild;\n        struct Node *rchild;\n    } NODE,*BSTree;\n     \n    /*\n    在指针T所指的二叉排序树中递归查找关键字为key的元素，\n    若查找成功，则返回指向该元素节点的指针，否则返回NULL\n    */\n    BSTree SearchBST(BSTree T,int key) {\n        if(!T || T->data == key) //查找到时返回的T为该元素节点，没查找到时为NULL\n            return T;\n        else if(key < T->data)            //如果key小于当前节点的值，则在其左子树中递归查找\n            return SearchBST(T->lchild,key);\n        else                                //如果key大于当前节点的值，则在其右子树中递归查找\n            return SearchBST(T->rchild,key);\n    }\n     \n    /*\n    在指针T所指的二叉排序树中递归查找关键字为key的元素，\n    若查找成功，则返回ture，并查找到的数据对应的节点指针保存在p中，\n    否则返回false，并将查找路径上访问的最后一个节点指针保存在p中。\n    这里的参数parent指向每次递归遍历的子树的根节点的父节点，即始终是参数T的父节点，\n    它的初始值为NULL，其目的是跟踪查找路径上访问的当前节点的父节点（即上一个访问节点）\n    该函数用来被后面的插入函数调用。\n    */\n    bool SearchBST(BSTree T,int key,BSTree parent,BSTree &p) {\n        if(!T) {       //如果T为NULL，则查找不成功\n            //这里包含了树空，即T为NULL的情况\n            p = parent;\n            return false;\n        } else {         //否则，继续查找\n            if(key == T->data) {         //如果相等，则查找成功\n                p = T;\n                return true;\n            } else if(key < T->data)      //在左子树中递归查找\n                return SearchBST(T->lchild,key,T,p);\n            else                            //在右子树中递归查找\n                return SearchBST(T->rchild,key,T,p);\n        }\n    }\n     \n    /*\n    当在T所指向的二叉排序树中查找不到关键字为key的数据元素时，\n    将其插入该二叉排序树，并返回ture，否则返回false。\n    树空时插入会改变根节点的值，因此要传入引用。\n    */\n    bool InsertBST(BSTree &T,int key) {\n        BSTree p;\n        if(!SearchBST(T,key,NULL,p)) {      //如果查找失败，则执行插入操作\n            //为新节点分配空间，并对各域赋值\n            BSTree pNew = (BSTree)malloc(sizeof(NODE));\n            pNew->data = key;\n            pNew->lchild = pNew->rchild = NULL;\n     \n            if(!p)                          //如果树空，则直接置pNew为根节点\n                T = pNew;\n            else if(key < p->data)            //作为左孩子插入p的左边\n                p->lchild = pNew;            //作为右孩子插入p的右边\n            else\n                p->rchild = pNew;\n            return true;\n        } else\n            return false;\n    }\n     \n    /*\n    采用第一种算法从二叉排序树中删除指针p所指向的节点,\n    并在保持二叉排序树有序的情况下，将其左右子树重接到该二叉排序树中.\n    该函数主要用来被后面的删除函数调用\n    */\n    void DeleteNode1(BSTree &p) {\n        BSTree q,s;\n        if(!p->lchild) {\n            //如果左子树为空，则只需重接其右子树\n            //这里包含了左右子树均为空的情况\n            q = p;\n            p = p->rchild ;\n            free(q);\n        } else if(!p->rchild) {\n            //如果右子树为空，则只需重接其左子树\n            q = p;\n            p = p->lchild;\n            free(q);\n        } else {\n            //如果左右子树都不为空，我们采取第一种方法来重接左右子树，\n            //我们这里采取修改左子树的方法，也可以修改右子树，方法类似\n            s = p->lchild;       //取待删节点的左节点\n     \n            //一直向右，最终s为待删节点的前驱节点\n            //如果将各节点元素按从小到大顺序排列成一个序列，\n            //则某节点的前驱节点即为序列中该节点的前面一个节点\n            while(s->rchild)\n                s = s->rchild;\n            s->rchild = p->rchild;    //将p的右子树接为s的右子树\n            q = p;\n            p = p->lchild;       //将p的左子树直接接到其父节点的左子树上\n            free(q);\n        }\n    }\n     \n    /*\n    采用第二种算法从二叉排序树中删除指针p所指向的节点,\n    并在保持二叉排序树有序的情况下，将其左右子树重接到该二叉排序树中.\n    该函数主要用来被后面的删除函数调用\n    */\n    void DeleteNode2(BSTree &p) {\n        BSTree q,s;\n        if(!p->lchild) {\n            //如果左子树为空，则只需重接其右子树\n            //这里包含了左右子树均为空的情况\n            q = p;\n            p = p->rchild ;\n            free(q);\n        } else if(!p->rchild) {\n            //如果右子树为空，则只需重接其左子树\n            q = p;\n            p = p->lchild;\n            free(q);\n        } else {\n            //如果左右子树都不为空，我们采取第二种方法来重接左右子树，\n            //我们这里采取修改左子树的方法，也可以修改右子树，方法类似\n            q = p;\n            s = p->lchild;       //取待删节点的左节点\n            while(s->rchild) {\n                //一直向右，最终s为待删节点的前驱节点。\n                //如果将各节点元素按从小到大顺序排列成一个序列，\n                //则某节点的前驱节点即为序列中该节点的前面一个节点\n                q = s;\n                s = s->rchild;\n            }\n            //用s来替换待删节点p\n            p->data = s->data;\n            //根据情况，将s的左子树重接到q上\n            if(p != q)\n                q->rchild = s->lchild;\n            else\n                q->lchild =s->lchild;\n            free(s);\n        }\n    }\n     \n    /*\n    若T所指向的二叉排序树中查找到关键字为key的数据元素，\n    则删除该元素对应的节点，并返回true，否则返回false\n    如果要删除的恰好是根节点，则会改变根节点的值，因此要传入引用\n    */\n    bool DeleteBST(BSTree &T,int key) {\n        //不存在关键字为key的节点\n        if(!T)\n            return false;\n        else {\n            if(key == T->data) {     //查找到关键字为key的节点\n                DeleteNode1(T);\n                //          DeleteNode2(T);\n                return true;\n            } else if(key < T->data) //继续查找左子树\n                return DeleteBST(T->lchild,key);\n            else                        //继续查找右子树\n                return DeleteBST(T->rchild,key);\n        }\n    }\n     \n    /*\n    根据所给的长为len的arr数组，按数组中元素的顺序构建一棵二叉排序树\n    */\n    BSTree CreatBST(int *arr,int len) {\n        BSTree T = NULL;\n        int i;\n        //按顺序逐个节点插入到二叉排序树中\n        for(i=0; i<len; i++)\n            InsertBST(T,arr[i]);\n        return T;\n    }\n     \n    /*\n    递归中序遍历二叉排序树，得到元素从小到大有序排列的序列\n    */\n    void inTraverse(BSTree T) {\n        if(T) {\n            if(T->lchild)\n                inTraverse(T->lchild);\n            printf(\"%d \",T->data);\n            if(T->rchild)\n                inTraverse(T->rchild);\n        }\n    }\n     \n    int main() {\n        int i;\n        int num;\n        printf(\"请输入节点个数：\");\n        scanf(\"%d\",&num);\n     \n        //输入num个整数\n        int *arr = (int *)malloc(num*sizeof(int));\n        printf(\"请依次输入这%d个整数（必须互不相等）：\",num);\n        for(i=0; i<num; i++)\n            scanf(\"%d\",arr+i);\n     \n        //中序遍历该二叉排序树，使数据按照从小到大的顺序输出\n        BSTree T = CreatBST(arr,num);\n        printf(\"中序遍历该二叉排序树的结果：\");\n        inTraverse(T);\n        printf(\"\\n\");\n     \n        //查找给定的整数\n        int key;\n        printf(\"请输入要查找的整数：\");\n        scanf(\"%d\",&key);\n        if(SearchBST(T,key))\n            printf(\"查找成功\\n\");\n        else\n            printf(\"查找不到该整数\\n\");\n     \n        //插入给定的整数\n        printf(\"请输入要插入的整数：\");\n        scanf(\"%d\",&key);\n        if(InsertBST(T,key)) {\n            printf(\"插入成功，插入后的中序遍历结果：\");\n            inTraverse(T);\n            printf(\"\\n\");\n        } else\n            printf(\"插入失败，该二叉排序树中已经存在整数%d\\n\",key);\n     \n        //删除给定的整数\n        printf(\"请输入要删除的整数：\");\n        scanf(\"%d\",&key);\n        if(DeleteBST(T,key)) {\n            printf(\"删除成功，插入后的中序遍历结果：\");\n            inTraverse(T);\n            printf(\"\\n\");\n        } else\n            printf(\"删除失败，该二叉排序树中不存在整数%d\\n\",key);\n     \n        return 0;\n    }\n', '1', '2016-09-22 12:17:38');
INSERT INTO `tool_code` VALUES ('81', '/**\n * Created on: 2016年09月30日 17:13:27\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n\nint main()\n{\n   	// 我的第一个 C 程序\n   	printf(\"test! \\n\");\n   	return 0;\n}\n', '1', '2016-09-30 17:13:40');
INSERT INTO `tool_code` VALUES ('82', '#import <Foundation/Foundation.h>\n		\nint main(int argc, const char * argv[]){\n     NSLog(@\"Hello world!\");\n     return (0);\n}\n', '8', '2016-09-30 17:19:25');
INSERT INTO `tool_code` VALUES ('83', '<?php\n/**\n * Created on: 2016年10月02日 14:55:17\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n\necho \'Hello World! hahha\';\n\n', '3', '2016-10-02 14:55:30');
INSERT INTO `tool_code` VALUES ('84', '#import <Foundation/Foundation.h>\n		\nint main(int argc, const char * argv[]){\n     NSLog(@\"Hello world! 666 \");\n     return (0);\n}\n', '8', '2016-10-06 17:56:29');
INSERT INTO `tool_code` VALUES ('85', '#import <Foundation/Foundation.h>\n		\nint main(int argc, const char * argv[]){\n     NSLog(@\"Hello world!\");\n     return (0);\n}\n', '8', '2016-10-06 17:58:04');
INSERT INTO `tool_code` VALUES ('86', '#import <Foundation/Foundation.h>\n		\nint main(int argc, const char * argv[]){\n     NSLog(@\"Hello world!\");\n     return (0);\n}\n', '8', '2016-10-06 18:01:18');
INSERT INTO `tool_code` VALUES ('87', '/**\n * Created on: 2016年10月06日 18:02:41\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n\nint main()\n{\n   	// 我的第一个 C 程序\n   	printf(\"Hello, World! \\n\");\n   	return 0;\n}\n', '1', '2016-10-06 18:02:45');

-- ----------------------------
-- Table structure for tool_config
-- ----------------------------
DROP TABLE IF EXISTS `tool_config`;
CREATE TABLE `tool_config` (
  `k` varchar(255) DEFAULT NULL,
  `value` varchar(1023) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tool_config
-- ----------------------------
INSERT INTO `tool_config` VALUES ('title', 'iTool - 代码编辑神器');
INSERT INTO `tool_config` VALUES ('keyword', 'itool，在线代码编辑器，在线运行，在线编译，ischool，jtahstu,666啊');
INSERT INTO `tool_config` VALUES ('des', '这么叼？我都不知道呢');
INSERT INTO `tool_config` VALUES ('icon', 'http://cdn.jtahstu.com/editor.ico');
INSERT INTO `tool_config` VALUES ('headAddCode', '');
INSERT INTO `tool_config` VALUES ('version', '1.10');
INSERT INTO `tool_config` VALUES ('indexMessage', '欢迎来到 iTool，墙裂推荐使用 火狐浏览器 或 谷歌浏览器 访问本站点');
INSERT INTO `tool_config` VALUES ('indexBarragerImg', 'http://cdn.jtahstu.com/firefox.png');
INSERT INTO `tool_config` VALUES ('indexBarragerInfo', '下载火狐浏览器');
INSERT INTO `tool_config` VALUES ('indexBarragerLink', 'http://www.firefox.com.cn/');
INSERT INTO `tool_config` VALUES ('editorTheme', 'xcode');
INSERT INTO `tool_config` VALUES ('editorHeight', '500');
INSERT INTO `tool_config` VALUES ('editorTitle', '编程语言：');
INSERT INTO `tool_config` VALUES ('defaultTitle', '作者就是懒得写题目...');
INSERT INTO `tool_config` VALUES ('paginateCount', '20');
INSERT INTO `tool_config` VALUES ('listCodeLength', '1000');
INSERT INTO `tool_config` VALUES ('footDes', 'iTool是一个在线代码编辑分享网站，起始于2016年9月，是站长毕业设计中的一部分。');
INSERT INTO `tool_config` VALUES ('footRecord', '皖ICP备15023420号');
INSERT INTO `tool_config` VALUES ('footEmail', 'root@jtahstu.com');
INSERT INTO `tool_config` VALUES ('footCopy', 'All Rights Reserved by &lt;a href=&quot;http://www.jtahstu.com&quot; target=&quot;_blank&quot;&gt;jtahstu&lt;/a&gt; . 勉强运行&lt;script&gt;document.write(getDay());&lt;/script&gt;天 . 已有 &lt;script src=&quot;http://count.knowsky.com/count1/count.asp?id=71916&amp;sx=1&amp;ys=9&quot; language=&quot;JavaScript&quot; charset=&quot;gb2312&quot;&gt;&lt;/script&gt; 人次浏览 .');
INSERT INTO `tool_config` VALUES ('cnzz', '&lt;script src=&quot;http://s95.cnzz.com/z_stat.php?id=1260398138&amp;web_id=1260398138&quot; language=&quot;JavaScript&quot;&gt;&lt;/script&gt;');

-- ----------------------------
-- Table structure for tool_lang
-- ----------------------------
DROP TABLE IF EXISTS `tool_lang`;
CREATE TABLE `tool_lang` (
  `id` int(11) NOT NULL,
  `language` varchar(255) DEFAULT NULL,
  `value` int(11) DEFAULT NULL,
  `mode` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tool_lang
-- ----------------------------
INSERT INTO `tool_lang` VALUES ('1', 'C/C++', '7', 'c_cpp');
INSERT INTO `tool_lang` VALUES ('2', 'HTML/CSS/JS', '666', 'html');
INSERT INTO `tool_lang` VALUES ('3', 'PHP', '3', 'php');
INSERT INTO `tool_lang` VALUES ('4', 'Java', '8', 'java');
INSERT INTO `tool_lang` VALUES ('5', 'Python', '0', 'python');
INSERT INTO `tool_lang` VALUES ('6', 'C#', '10', 'csharp');
INSERT INTO `tool_lang` VALUES ('7', 'Python3', '15', 'python');
INSERT INTO `tool_lang` VALUES ('8', 'Objective-C', '12', 'objectivec');
INSERT INTO `tool_lang` VALUES ('9', 'Swift', '16', 'swift');
INSERT INTO `tool_lang` VALUES ('10', 'Ruby', '1', 'ruby');
INSERT INTO `tool_lang` VALUES ('11', 'Perl', '14', 'perl');
INSERT INTO `tool_lang` VALUES ('12', 'Bash', '11', 'sh');
INSERT INTO `tool_lang` VALUES ('13', 'Go', '6', 'golang');
INSERT INTO `tool_lang` VALUES ('14', 'Node.js', '4', 'javascript');
INSERT INTO `tool_lang` VALUES ('15', 'Lua', '17', 'lua');
INSERT INTO `tool_lang` VALUES ('16', 'Scala', '5', 'scala');
INSERT INTO `tool_lang` VALUES ('17', 'Pescal', '18', 'pescal');

-- ----------------------------
-- Table structure for tool_share
-- ----------------------------
DROP TABLE IF EXISTS `tool_share`;
CREATE TABLE `tool_share` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `linkid` int(11) DEFAULT NULL,
  `title` varchar(255) DEFAULT NULL,
  `code` text,
  `value` int(11) DEFAULT NULL,
  `time` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `view` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tool_share
-- ----------------------------
INSERT INTO `tool_share` VALUES ('1', '1', '作者就是懒得写题目...', '/**\n * Created on: 2016年09月17日 11:41:52\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   return 0;\n}\n', '7', '2016-10-06 21:20:04', '20');
INSERT INTO `tool_share` VALUES ('2', '2', '作者就是懒得写题目...', '/**\n * Created on: 2016年09月17日 11:47:21\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\");\n    }\n}\n', '8', '2016-10-02 15:27:25', '3');
INSERT INTO `tool_share` VALUES ('3', '3', '作者就是懒得写题目...', '# -*- coding: UTF-8 -*-\n# Created on: 2016年09月17日 12:14:35\n# Author: Guest\n# Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n\nprint \'Hello World!\'\n', '0', '2016-10-03 14:30:32', '9');
INSERT INTO `tool_share` VALUES ('4', '4', '作者就是懒得写题目...', '/**\n * Created on: 2016年09月17日 12:16:32\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\nusing System;\nnamespace HelloWorldApplication\n{\n   class HelloWorld\n   {\n      static void Main(string[] args)\n      {\n         /* 我的第一个 C# 程序*/\n         Console.WriteLine(\"Hello World!\");\n         Console.WriteLine(\"just a test\");\n         Console.ReadKey();\n      }\n   }\n}\n', '10', '2016-10-02 15:27:25', '6');
INSERT INTO `tool_share` VALUES ('5', '5', '作者就是懒得写题目...', '# -*- coding: UTF-8 -*-\n# Created on: 2016年09月17日 12:19:10\n# Author: Guest\n# Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n\nprint \'Hello World!\'\nprint \'test share\'\n', '0', '2016-10-03 17:04:34', '2');
INSERT INTO `tool_share` VALUES ('6', '6', '作者就是懒得写题目...', '/**\n * Created on: 2016年09月17日 11:41:52\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   printf(\"test share again\");\n   return 0;\n}\n', '7', '2016-10-05 14:51:15', '7');
INSERT INTO `tool_share` VALUES ('7', '7', '作者就是懒得写题目...', '<?php\n/**\n * Created on: 2016年09月17日 12:47:45\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n\necho \'Hello World!\';\nphpinfo();\n\n?>\n', '3', '2016-10-02 15:27:25', '2');
INSERT INTO `tool_share` VALUES ('8', '8', '作者就是懒得写题目...', '<?php\n/**\n * Created on: 2016年09月17日 12:47:45\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n\necho \'Hello World!\';\nphpinfo();\n\necho \'unbelievable\';\n\n?>\n', '3', '2016-10-02 15:27:25', '1');
INSERT INTO `tool_share` VALUES ('9', '9', '作者就是懒得写题目...', '/**\n * Created on: 2016年09月17日 12:51:37\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   printf(\"unbelievable , i can do it !\");\n   return 0;\n}\n', '7', '2016-10-02 15:27:25', '3');
INSERT INTO `tool_share` VALUES ('10', '10', '作者就是懒得写题目...', '/**\n * Created on: 2016年09月17日 12:51:37\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   printf(\"unbelievable , i can do it !\");\n   printf(\"666666\");\n   return 0;\n}\n', '7', '2016-10-02 15:27:25', '2');
INSERT INTO `tool_share` VALUES ('11', '11', '作者就是懒得写题目...', '<?php\n/**\n * Created on: 2016年09月17日 12:59:55\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n\necho \'Hello World!\';\necho \'test time\';\n\n?>\n', '3', '2016-10-05 14:53:43', '4');
INSERT INTO `tool_share` VALUES ('12', '12', '作者就是懒得写题目...', '#import <Foundation/Foundation.h>\n		\nint main(int argc, const char * argv[]){\n     NSLog(@\"Hello world!\");\n     NSString* s=@\"jtahstu\";\n     NSLog(@\"my name is %@\",s);\n     \n     return (0);\n}\n', '12', '2016-10-02 15:27:25', '4');
INSERT INTO `tool_share` VALUES ('13', '13', '作者就是懒得写题目...', '<!DOCTYPE html>\n<html>\n\n<head>\n	<meta charset=\"utf-8\">\n	<title>iTool - 在线代码编辑</title>\n</head>\n\n<body>\n	<h1>我的第一个标题</h1>\n	<p>我的第一个段落。</p>\n</body>\n\n</html>', '666', '2016-10-02 15:27:25', '2');
INSERT INTO `tool_share` VALUES ('14', '14', '作者就是懒得写题目...', '<!DOCTYPE html>\n<html>\n\n<head>\n	<meta charset=\"utf-8\">\n	<title>iTool - 在线代码编辑</title>\n</head>\n\n<body>\n	<h1>我的第一个标题</h1>\n	<p>我的第一个段落。</p>\n	<div id=\"\">\n	    测试一下html分享\n	</div>\n</body>\n\n</html>', '666', '2016-10-02 15:27:25', '4');
INSERT INTO `tool_share` VALUES ('15', '15', '作者就是懒得写题目...', '/**\n * Created on: 2016年09月18日 15:43:56\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n\nint main()\n{\n   /* 我的第一个 C 程序 */\n   printf(\"Hello, World! \\n\");\n   return 0;\n}\n', '7', '2016-10-02 15:27:25', '1');
INSERT INTO `tool_share` VALUES ('16', '16', '作者就是懒得写题目...', '    <?php\n     \n    /**\n     * Created by PhpStorm.\n     * User: jtahstu\n     * Date: 2016/8/24\n     * Time: 12:09\n     */\n    class test {\n    	private static $_instance;\n    	//保存类实例的私有静态成员变量\n     \n    	//定义一个私有的构造函数，确保单例类不能通过new关键字实例化，只能被其自身实例化\n    	private final function __construct() {\n    		echo \'test __construct\';\n    	}\n     \n    	//定义私有的__clone()方法，确保单例类不能被复制或克隆\n    	private function __clone() {\n    	}\n     \n    	public static function getInstance() {\n    		//检测类是否被实例化\n    		if (!(self::$_instance instanceof self)) {\n    			self::$_instance = new test();\n    		}\n    		return self::$_instance;\n    	}\n     \n    }\n     \n    //调用单例类\n    test::getInstance();', '3', '2016-10-06 21:20:22', '7');
INSERT INTO `tool_share` VALUES ('17', '17', '链表', '/**\n * Created on: 2016年09月18日 18:29:35\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\ntypedef struct {\n    char key[15];	//关键字\n    char name[20];\n    int age;\n} DATA; 	//数据结点类型\n#include <stdlib.h>\ntypedef struct Node {\n    DATA data;\n    struct Node *next;\n} ChainListType;\nChainListType *ChainListAddEnd(ChainListType *head,DATA data);  //添加结点到链表末尾\nChainListType *ChainListAddFirst(ChainListType *head,DATA data);  //添加结点到链表首部\nChainListType *ChainListFind(ChainListType *head,char *key); //按关键字在链表中查找内容\nChainListType *ChainListInsert(ChainListType *head,char *findkey,DATA data);  //插入结点到链表指定位置\nint ChainListDelete(ChainListType *head,char *key);//删除指定关键字的结点\nint ChainListLength(ChainListType *head);//获取链表结点数量\n\n//#include \"2-5 ChainList.c\"\n#include <string.h>\nChainListType *ChainListAddEnd(ChainListType *head,DATA data) { //添加结点到链表结尾\n    ChainListType *node,*h;\n    if(!(node=(ChainListType *)malloc(sizeof(ChainListType)))) {\n        printf(\"为保存结点数据申请内存失败！\\n\");\n        return NULL;  //分配内存失败\n    }\n    node->data=data; //保存数据\n    node->next=NULL;  //设置结点指针为空，即为表尾\n    if(head==NULL) { //是头指针\n        head=node;\n        return head;\n    }\n    h=head;\n    while(h->next!=NULL) //查找链表的末尾\n        h=h->next ;\n    h->next=node;\n    return head;\n}\nChainListType *ChainListAddFirst(ChainListType *head,DATA data) {\n    ChainListType *node,*h;\n    if(!(node=(ChainListType *)malloc(sizeof(ChainListType)))) {\n        printf(\"为保存结点数据申请内存失败！\\n\");\n        return NULL;  //分配内存失败\n    }\n    node->data=data; //保存数据\n    node->next=head;  //指向头指针所指结点\n    head=node;        //头指针指向新增结点\n    return head;\n}\nChainListType *ChainListInsert(ChainListType *head,char *findkey,DATA data) { //插入结点到链表指定位置\n    ChainListType *node,*node1;\n    if(!(node=(ChainListType *)malloc(sizeof(ChainListType)))) { //分配保存结点的内容\n        printf(\"为保存结点数据申请内存失败！\\n\");\n        return 0;  //分配内存失败\n    }\n    node->data=data;  //保存结点中的数据\n    node1=ChainListFind(head,findkey);\n    if(node1) { //若找到要插入的结点\n        node->next=node1->next;  //新插入结点指向关键结点的下一结点\n        node1->next=node;    //设置关键结点指向新插入结点\n    } else {\n        free(node);//释放内存\n        printf(\"未找到插入位置！\\n\");\n    }\n    return head;//返回头指针\n}\nChainListType *ChainListFind(ChainListType *head,char *key) { //按关键字在链表中查找内容\n    ChainListType *h;\n    h=head;       //保存链表头指针\n    while(h) {    //若结点有效，则进行查找\n        if(strcmp(h->data.key,key)==0) //若结点关键字与传入关键字相同\n            return h;  //返回该结点指针\n        h=h->next; //处理下一结点\n    }\n    return NULL; //返回空指针\n}\nint ChainListDelete(ChainListType *head,char *key) {\n    ChainListType *node,*h; //node保存删除结点的前一结点\n    node=h=head;\n    while(h) {\n        if(strcmp(h->data.key,key)==0) { //找到关键字，执行删除操作\n            node->next=h->next;  //使前一结点指向当前结点的下一结点\n            free(h);  //释放内存\n            return 1;\n        } else {\n            node=h;  //指向当前结点\n            h=h->next; //指向下一结点\n        }\n    }\n    return 0;//未删除\n}\nint ChainListLength(ChainListType *head) { //获取链表结点数量\n    ChainListType *h;\n    int i=0;\n    h=head;\n    while(h) {    //遍历整个链表\n        i++; //累加结点数量\n        h=h->next;//处理下一结点\n    }\n    return i;//返回结点数量\n}\n\nvoid ChainListAll(ChainListType *head) { //遍历链表\n    ChainListType *h;\n    DATA data;\n    h=head;\n    printf(\"链表所有数据如下：\\n\");\n    while(h) { //循环处理链表每个结点\n        data=h->data;//获取结点数据\n        printf(\"(%s,%s,%d)\\n\",data.key,data.name,data.age);\n        h=h->next;//处理下一结点\n    }\n    return;\n}\nint main() {\n    ChainListType *node, *head=NULL;\n    DATA data;\n    char key[15],findkey[15];\n\n    printf(\"输入链表中的数据，包括关键字、姓名、年龄，关键字输入0，则退出：\\n\");\n    do {\n        fflush(stdin);  //清空输入缓冲区\n        scanf(\"%s\",data.key);\n        if(strcmp(data.key,\"0\")==0) break; //若输入0，则退出\n        scanf(\"%s%d\",data.name,&data.age);\n        head=ChainListAddEnd(head,data);//在链表尾部添加结点数据\n    } while(1);\n\n    printf(\"该链表共有%d个结点。\\n\",ChainListLength(head)); //返回结点数量\n    ChainListAll(head); //显示所有结点\n\n    printf(\"\\n插入结点，输入插入位置的关键字：\") ;\n    scanf(\"%s\",&findkey);//输入插入位置关键字\n    printf(\"输入插入结点的数据(关键字 姓名 年龄):\");\n    scanf(\"%s%s%d\",data.key,data.name,&data.age);//输入插入结点数据\n    head=ChainListInsert(head,findkey,data);//调用插入函数\n\n    ChainListAll(head); //显示所有结点\n\n    printf(\"\\n在链表中查找，输入查找关键字:\");\n    fflush(stdin);//清空输入缓冲区\n    scanf(\"%s\",key);//输入查找关键字\n    node=ChainListFind(head,key);//调用查找函数，返回结点指针\n    if(node) { //若返回结点指针有效\n        data=node->data;//获取结点的数据\n        printf(\"关键字%s对应的结点数据为(%s,%s,%d)\\n\" ,key,data.key,data.name,data.age);\n    } else//若结点指针无效\n        printf(\"在链表中未找到关键字为%s的结点！\\n\",key);\n\n    printf(\"\\n在链表中删除结点，输入要删除的关键字:\");\n    fflush(stdin);//清空输入缓冲区\n    scanf(\"%s\",key);//输入删除结点关键字\n    ChainListDelete(head,key); //调用删除结点函数\n    ChainListAll(head); //显示所有结点\n    getch();\n    return 0;\n}', '7', '2016-10-06 17:24:05', '11');
INSERT INTO `tool_share` VALUES ('18', '18', '查找算法', '/**\n * Created on: 2016年09月18日 18:29:35\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include \"stdio.h\"\n#include \"stdlib.h\"\n#include \"io.h\"\n#include \"math.h\"\n#include \"time.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n#define MAXSIZE 100 /* 存储空间初始分配量 */\n\ntypedef int Status;	/* Status是函数的类型,其值是函数结果状态代码，如OK等 */\n\nint F[100]; /* 斐波那契数列 */\n\n/* 无哨兵顺序查找，a为数组，n为要查找的数组个数，key为要查找的关键字 */\nint Sequential_Search(int *a,int n,int key) {\n    int i;\n    for(i=1; i<=n; i++) {\n        if (a[i]==key)\n            return i;\n    }\n    return 0;\n}\n/* 有哨兵顺序查找 */\nint Sequential_Search2(int *a,int n,int key) {\n    int i;\n    a[0]=key;\n    i=n;\n    while(a[i]!=key) {\n        i--;\n    }\n    return i;\n}\n\n/* 折半查找 */\nint Binary_Search(int *a,int n,int key) {\n    int low,high,mid;\n    low=1;	/* 定义最低下标为记录首位 */\n    high=n;	/* 定义最高下标为记录末位 */\n    while(low<=high) {\n        mid=(low+high)/2;	/* 折半 */\n        if (key<a[mid])		/* 若查找值比中值小 */\n            high=mid-1;		/* 最高下标调整到中位下标小一位 */\n        else if (key>a[mid])/* 若查找值比中值大 */\n            low=mid+1;		/* 最低下标调整到中位下标大一位 */\n        else {\n            return mid;		/* 若相等则说明mid即为查找到的位置 */\n        }\n\n    }\n    return 0;\n}\n\n/* 插值查找 */\nint Interpolation_Search(int *a,int n,int key) {\n    int low,high,mid;\n    low=1;	/* 定义最低下标为记录首位 */\n    high=n;	/* 定义最高下标为记录末位 */\n    while(low<=high) {\n        mid=low+ (high-low)*(key-a[low])/(a[high]-a[low]); /* 插值 */\n        if (key<a[mid])		/* 若查找值比插值小 */\n            high=mid-1;		/* 最高下标调整到插值下标小一位 */\n        else if (key>a[mid])/* 若查找值比插值大 */\n            low=mid+1;		/* 最低下标调整到插值下标大一位 */\n        else\n            return mid;		/* 若相等则说明mid即为查找到的位置 */\n    }\n    return 0;\n}\n\n/* 斐波那契查找 */\nint Fibonacci_Search(int *a,int n,int key) {\n    int low,high,mid,i,k=0;\n    low=1;	/* 定义最低下标为记录首位 */\n    high=n;	/* 定义最高下标为记录末位 */\n    while(n>F[k]-1)\n        k++;\n    for (i=n; i<F[k]-1; i++)\n        a[i]=a[n];\n\n    while(low<=high) {\n        mid=low+F[k-1]-1;\n        if (key<a[mid]) {\n            high=mid-1;\n            k=k-1;\n        } else if (key>a[mid]) {\n            low=mid+1;\n            k=k-2;\n        } else {\n            if (mid<=n)\n                return mid;		/* 若相等则说明mid即为查找到的位置 */\n            else\n                return n;\n        }\n\n    }\n    return 0;\n}\n\nint main(void) {\n\n    int a[MAXSIZE+1],i,result;\n    int arr[MAXSIZE]= {0,1,16,24,35,47,59,62,73,88,99};\n\n    for(i=0; i<=MAXSIZE; i++) {\n        a[i]=i;\n    }\n    result=Sequential_Search(a,MAXSIZE,MAXSIZE);\n    printf(\"Sequential_Search:%d \\n\",result);\n    result=Sequential_Search2(a,MAXSIZE,1);\n    printf(\"Sequential_Search2:%d \\n\",result);\n\n    result=Binary_Search(arr,10,62);\n    printf(\"Binary_Search:%d \\n\",result);\n\n\n    result=Interpolation_Search(arr,10,62);\n    printf(\"Interpolation_Search:%d \\n\",result);\n\n\n    F[0]=0;\n    F[1]=1;\n    for(i = 2; i < 100; i++) {\n        F[i] = F[i-1] + F[i-2];\n    }\n    result=Fibonacci_Search(arr,10,62);\n    printf(\"Fibonacci_Search:%d \\n\",result);\n\n    return 0;\n}', '7', '2016-10-05 15:15:16', '5');
INSERT INTO `tool_share` VALUES ('19', '19', '作用域', '/**\n * Created on: 2016年09月21日 20:24:58\n * Author: jtahstu\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 作用域\n */\n#include <stdio.h>\n\nvoid fun(){\n    int a=3,b;\n    printf(\"fun()函数里面的a的值为：%d\\n\",a);\n    return ;\n}\n\nint main()\n{\n   	int a=0,b;\n   	{\n   	    int a=1;\n   	    printf(\"main()函数里面被大括号封装的a的值为：%d\\n\",a);\n   	}\n   	fun();\n   	printf(\"mian()函数里面的a的值为:%d\\n\",a);\n   	return 0;\n}\n', '7', '2016-10-02 15:39:21', '0');
INSERT INTO `tool_share` VALUES ('20', '20', '静态局部变量', '/**\n * Created on: 2016年09月21日 20:31:59\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 静态局部变量\n */\n#include <stdio.h>\n\nvoid print(){\n    static int a=0;\n    printf(\"静态局部变量a=%d\\n\",a++);\n}\n\nint main()\n{\n   	print();\n   	print();\n   	return 0;\n}\n', '7', '2016-10-02 15:39:42', '0');
INSERT INTO `tool_share` VALUES ('21', '21', '指针数组和数组指针', '/**\n * Created on: 2016年09月21日 20:33:28\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 指针数组和数组指针\n */\n#include <stdio.h>\n\nint main()\n{\n   	int arr[4][4]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   	int (*p1)[4];\n   	int *p2[4];\n   	int i,j,k;\n   	p1=arr;\n   	printf(\"使用数组指针的方式访问二维数组arr\\n\");\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,*(*(p1+i)+j));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	printf(\"\\n使用指针数组的方式访问二维数组arr\\n\");\n   	for(k=0;k<4;k++)\n        p2[k]=arr[k];\n   	for(i=0;i<4;i++){\n   	    for(j=0;j<4;j++){\n   	        printf(\"arr[%d][%d]=%d\\t\",i,j,*(p2[i]+j));\n   	    }\n   	    printf(\"\\n\");\n   	}\n   	return 0;\n}\n', '7', '2016-10-06 18:02:16', '9');
INSERT INTO `tool_share` VALUES ('22', '22', '二维数组', '/**\n * Created on: 2016年09月21日 20:46:41\n * Author: jtahstu\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n * 其他表示二维数组每行起始地址的方式\n */\n#include <stdio.h>\n\nint main()\n{\n   	int arr[4][4]={0,1,2,3,4,5,6,7,8,9,10,1,12,13,14,15};\n   	int i;\n   	for (int i = 0; i < 4; i++) {\n   	    printf(\"第%d行的起始地址为：%d\\n\",i+1,arr+i);\n   	    printf(\"第%d行的起始地址为：%d\\n\",i+1,arr[i]);\n   	    printf(\"第%d行的起始地址为：%d\\n\",i+1,*(arr+i));\n   	    printf(\"第%d行的起始地址为：%d\\n\\n\",i+1,&arr[i]);\n   	}\n   	return 0;\n}\n', '7', '2016-10-02 15:40:21', '2');
INSERT INTO `tool_share` VALUES ('23', '23', '顺序队列', '/**\n * Created on: 2016年09月22日 12:37:52\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n//顺序队列操作\n#define QUEUEMAX 15\ntypedef struct {\n    DATA data[QUEUEMAX]; //队列数组\n    int head; //队头\n    int tail; //队尾\n} SeqQueue;\nSeqQueue *SeqQueueInit() {\n    SeqQueue *q;\n    if(q=(SeqQueue *)malloc(sizeof(SeqQueue))) { //申请保存队列的内存\n        q->head = 0;//设置队头\n        q->tail = 0;//设置队尾\n        return q;\n    } else\n        return NULL; //返回空\n}\nvoid SeqQueueFree(SeqQueue *q) { //释放队列\n    if (q!=NULL)\n        free(q);\n}\nint SeqQueueIsEmpty(SeqQueue *q) { //队列是否为空\n    return (q->head==q->tail);\n}\nint SeqQueueIsFull(SeqQueue *q) { //队列是否已满\n    return (q->tail==QUEUEMAX);\n}\nint SeqQueueLen(SeqQueue *q) { //获取队列长度\n    return(q->tail-q->head);\n}\nint SeqQueueIn(SeqQueue *q,DATA data) { //顺序队列的入队函数\n    if(q->tail==QUEUEMAX) {\n        printf(\"队列已满！\\n\");\n        return(0);\n    } else {\n        q->data[q->tail++]=data;\n        return(1);\n    }\n}\nDATA *SeqQueueOut(SeqQueue *q) { //顺序队列的出队\n    if(q->head==q->tail) {\n        printf(\"\\n队列已空！\\n\");\n        return NULL;\n    } else {\n        return &(q->data[q->head++]);\n    }\n}\nDATA *SeqQueuePeek(SeqQueue *q) { //获取队头元素\n    if(SeqQueueIsEmpty(q)) {\n        printf(\"\\n队列为空!\\n\");\n        return NULL;\n    } else {\n        return &(q->data[q->head]);\n    }\n}\n\n', '7', '2016-10-05 15:23:15', '4');
INSERT INTO `tool_share` VALUES ('24', '24', '循环队列', '/**\n * Created on: 2016年09月22日 12:37:52\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n//循环队列\n#define QUEUEMAX 15\ntypedef struct {\n    DATA data[QUEUEMAX]; //队列数组\n    int head; //队头\n    int tail; //队尾\n} CycQueue;\nCycQueue *CycQueueInit() {\n    CycQueue *q;\n    if(q=(CycQueue *)malloc(sizeof(CycQueue))) { //申请保存队列的内存\n        q->head = 0;//设置队头\n        q->tail = 0;//设置队尾\n        return q;\n    } else\n        return NULL; //返回空\n}\nvoid CycQueueFree(CycQueue *q) { //释放队列\n    if (q!=NULL)\n        free(q);\n}\nint CycQueueIsEmpty(CycQueue *q) { //队列是否为空\n    return (q->head==q->tail);\n}\nint CycQueueIsFull(CycQueue *q) { //队列是否已满\n    return ((q->tail+1)%QUEUEMAX==q->head);\n}\nint CycQueueIn(CycQueue *q,DATA data) { //入队函数\n    if((q->tail+1)%QUEUEMAX == q->head ) {\n        printf(\"队列已满！\\n\");\n        return 0;\n    } else {\n        q->tail=(q->tail+1)%QUEUEMAX;//求列尾序号\n        q->data[q->tail]=data;\n        return 1;\n    }\n}\nDATA *CycQueueOut(CycQueue *q) { //循环队列的出队函数\n    if(q->head==q->tail) { //队列为空\n        printf(\"队列已空！\\n\");\n        return NULL;\n    } else {\n        q->head=(q->head+1)%QUEUEMAX;\n        return &(q->data[q->head]);\n    }\n}\nint CycQueueLen(CycQueue *q) { //获取队列长度\n    int n;\n    n=q->tail-q->head;\n    if(n<0)\n        n=QUEUEMAX+n;\n    return n;\n}\nDATA *CycQueuePeek(CycQueue *q) { //获取队定中第1个位置的数据\n    if(q->head==q->tail) {\n        printf(\"队列已经为空!\\n\");\n        return NULL;\n    } else {\n        return &(q->data[(q->head+1)%QUEUEMAX]);\n    }\n}\n', '7', '2016-10-02 15:40:33', '6');
INSERT INTO `tool_share` VALUES ('25', '25', '约瑟夫环', '/**\n * Created on: 2016年09月22日 15:36:35\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n//约瑟夫环\n#include <stdio.h>\n#include <stdlib.h>\n#define N 41    //总共的人数\n#define M 3     //每多少个自杀\nint main() {\n    int man[N]= {0};\n    int count=1;\n    int i=0,pos=-1;\n    int alive=0;\n    while(count<=N) {\n        do {\n            pos=(pos+1) % N;  //环状处理\n            if(man[pos]==0)\n                i++;\n            if(i==M) { //报数3的人\n                i=0;\n                break;\n            }\n        } while(1);\n        man[pos]=count;\n        count++;\n    }\n    printf(\"\\n约瑟夫排列(最初位置-约瑟夫环位置):\\n\");\n    for(i=0; i<N; i++) {\n        printf(\"%d-%d  \",i+1,man[i]);\n        if(i!=0 && i%10==0) //每输出10个则换行\n            printf(\"\\n\");\n    }\n    printf(\"\\n\\n准备剩下的人数？\");\n    scanf(\"%d\", &alive);\n    printf(\"这%d人初始位置应排在以下序号:\\n\",alive);\n    alive=N-alive;\n    for(i=0; i<N; i++)\n        if(man[i]>alive)\n            printf(\"初始序号:%d,约瑟夫环序号:%d\\n\",i+1,man[i]);\n    printf(\"\\n\");\n    getch();\n    return 0;\n}\n', '7', '2016-10-06 21:25:17', '4');
INSERT INTO `tool_share` VALUES ('26', '26', '作者就是懒得写题目...', '<!DOCTYPE html>\n<html>\n\n<head>\n	<meta charset=\"utf-8\">\n	<title>iTool - 在线代码编辑</title>\n</head>\n\n<body>\n	<h1>我的第一个标题</h1>\n	<p>我的第一个段落。</p>\n</body>\n\n</html>', '666', '2016-10-05 15:09:17', '2');
INSERT INTO `tool_share` VALUES ('27', '27', '作者就是懒得写题目...', '\n						/**\n * Created on: 2016年10月02日 14:32:33\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n\nint main()\n{\n   	// 我的第一个 C 程序\n   	printf(\"Hello, World! \\n\");\n   	return 0;\n}\n					', '7', '2016-10-02 15:27:25', '0');
INSERT INTO `tool_share` VALUES ('28', '28', '作者就是懒得写题目...', '\n						<?php\n/**\n * Created on: 2016年10月02日 14:37:34\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n\necho \'Hello World!\';\n\n?>\n					', '3', '2016-10-02 15:27:25', '0');
INSERT INTO `tool_share` VALUES ('29', '29', 'just test title', '\n						/**\n * Created on: 2016年10月02日 14:50:39\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n#include <stdio.h>\n\nint main()\n{\n   	// 我的第一个 C 程序\n   	printf(\"Hello, World! \\n\");\n   	return 0;\n}\n					', '7', '2016-10-02 15:07:07', '1');
INSERT INTO `tool_share` VALUES ('30', '30', 'php代码分享', '<?php\n/**\n * Created on: 2016年10月02日 14:55:17\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\n\necho \'Hello World! hahha\';\n\n', '3', '2016-10-02 15:07:45', '19');
INSERT INTO `tool_share` VALUES ('31', '31', '作者就是懒得写题目...', '/**\n * Created on: 2016年10月02日 15:25:27\n * Author: Guest\n * Copyright (c) 2016, tool.usta.wiki , All Rights Reserved.\n */\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println(\"Hello World!\");\n    }\n}\n', '8', '2016-10-02 15:25:41', '1');
INSERT INTO `tool_share` VALUES ('32', '32', '6666', '<!DOCTYPE html>\n<html>\n\n<head>\n	<meta charset=\"utf-8\">\n	<title>iTool - 在线代码编辑</title>\n</head>\n\n<body>\n	<h1>我的第一个标题</h1>\n	<p>我的第一个段落。</p>\n</body>\n\n</html>', '666', '2016-10-03 14:30:45', '2');
INSERT INTO `tool_share` VALUES ('33', '33', '666', '#import <Foundation/Foundation.h>\n		\nint main(int argc, const char * argv[]){\n     NSLog(@\"Hello world!\");\n     return (0);\n}\n', '12', '2016-10-06 18:01:33', '0');

-- ----------------------------
-- Table structure for tool_temp
-- ----------------------------
DROP TABLE IF EXISTS `tool_temp`;
CREATE TABLE `tool_temp` (
  `id` int(11) NOT NULL,
  `template` text,
  PRIMARY KEY (`id`),
  CONSTRAINT `lang` FOREIGN KEY (`id`) REFERENCES `tool_lang` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tool_temp
-- ----------------------------
INSERT INTO `tool_temp` VALUES ('1', '/**\r\n * Created on: {{date}}\r\n * Author: Guest\r\n * Copyright (c) {{year}}, tool.usta.wiki , All Rights Reserved.\r\n */\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n   	// 我的第一个 C 程序\r\n   	printf(\"Hello, World! \\n\");\r\n   	return 0;\r\n}');
INSERT INTO `tool_temp` VALUES ('2', '<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n	<meta charset=\"utf-8\">\r\n	<title>iTool - 在线代码编辑</title>\r\n</head>\r\n\r\n<body>\r\n	<h1>我的第一个标题</h1>\r\n	<p>我的第一个段落。</p>\r\n</body>\r\n\r\n</html>');
INSERT INTO `tool_temp` VALUES ('3', '<?php\r\n/**\r\n * Created on: {{date}}\r\n * Author: Guest\r\n * Copyright (c) {{year}}, tool.usta.wiki , All Rights Reserved.\r\n */\r\n\r\necho \'Hello World!\';\r\n');
INSERT INTO `tool_temp` VALUES ('4', '/**\r\n * Created on: {{date}}\r\n * Author: Guest\r\n * Copyright (c) {{year}}, tool.usta.wiki , All Rights Reserved.\r\n */\r\npublic class HelloWorld {\r\n    public static void main(String []args) {\r\n       System.out.println(\"Hello World!\");\r\n    }\r\n}');
INSERT INTO `tool_temp` VALUES ('5', '# -*- coding: UTF-8 -*-\r\n# Created on: {{date}}\r\n# Author: Guest\r\n# Copyright (c) {{year}}, tool.usta.wiki , All Rights Reserved.\r\n\r\nprint \'Hello World!\'');
INSERT INTO `tool_temp` VALUES ('6', '/**\r\n * Created on: {{date}}\r\n * Author: Guest\r\n * Copyright (c) {{year}}, tool.usta.wiki , All Rights Reserved.\r\n */\r\nusing System;\r\nnamespace HelloWorldApplication\r\n{\r\n   class HelloWorld\r\n   {\r\n      static void Main(string[] args)\r\n      {\r\n         /* 我的第一个 C# 程序*/\r\n         Console.WriteLine(\"Hello World!\");\r\n         Console.ReadKey();\r\n      }\r\n   }\r\n}');
INSERT INTO `tool_temp` VALUES ('7', '# Created on: {{date}}\r\n# Author: Guest\r\n# Copyright (c) {{year}}, tool.usta.wiki , All Rights Reserved.\r\n#!/usr/bin/python\r\nprint(\"Hello, World!\");');
INSERT INTO `tool_temp` VALUES ('8', '#import <Foundation/Foundation.h>\r\n		\r\nint main(int argc, const char * argv[]){\r\n     NSLog(@\"Hello world!\");\r\n     return (0);\r\n}');
INSERT INTO `tool_temp` VALUES ('9', '/* 我的第一个 Swift 程序 */\r\nvar myString = \"Hello, World!\"\r\n\r\nprint(myString)');
INSERT INTO `tool_temp` VALUES ('10', '#!/usr/bin/ruby\r\n# -*- coding: UTF-8 -*-\r\n\r\nputs \"Hello World!\";');
INSERT INTO `tool_temp` VALUES ('11', '#!/usr/bin/perl\r\n		\r\nprint \"Hello, World!\\n\";');
INSERT INTO `tool_temp` VALUES ('12', '#!/bin/bash\r\necho \'Hello World!\'');
INSERT INTO `tool_temp` VALUES ('13', 'package main\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n   fmt.Println(\"Hello, World!\")\r\n}');
INSERT INTO `tool_temp` VALUES ('14', 'console.log(\"Hello World!\");');
INSERT INTO `tool_temp` VALUES ('15', 'print(\"Hello World!\")');
INSERT INTO `tool_temp` VALUES ('16', 'object file {\r\n  def main(args:Array[String])\r\n  {\r\n    println(\"Hello World!\")\r\n  }\r\n		\r\n}');
INSERT INTO `tool_temp` VALUES ('17', 'program Hello;\r\nbegin\r\n  writeln (\'Hello, world!\')\r\nend.');
SET FOREIGN_KEY_CHECKS=1;
